# stack pointer starts at address 0 which is very problematic
# because it causes the stack pointer to address bytes in memory which don't exist in the RAM 
# this in turn causes RET functions to go to address 0 instead of back to the CALL
# so the Stack Pointer needs to be manually set, I added a psuedo op to do this automatically but the code boils down to
# LXI HL r8191
# SPHL

.initSP
MVI A 7
MVI E 9
CALL mult
SHLD r128

MVI A 10
MVI E 11
CALL mult
SHLD r130

MVI A 13
MVI E 6
CALL mult
SHLD r132

MVI A 9
MVI E 10
CALL mult
SHLD r134

HLT

.func mult
# clear registers
MVI D 0
LXI HL r0

# init counter
MVI B 4

# for loop
.pos loop

# test LSB of multiplier
RAR
JNC next
# add multiplicand to partial product if one
DAD DE

.pos next
# LShift multiplicand
XCHG 
DAD HL
XCHG

# repeat for loop while counter is > 0 or return when not
DCR B
JNZ loop

RAR
RET